import pandas as pd

# Generated by CodiumAI

from ClusterAndPredict import ClusterAndPredict
import pytest

class TestCalculatePrecisionRecallForThree:

    #  Correctly calculates precision and recall when all predicted veracities match actual veracities
    def test_all_predictions_match_actuals(self):
        cluster_predictor = ClusterAndPredict()
        data = {
            'text': ['claim1', 'claim2', 'claim3', 'claim4'],
            'veracity': [3, 3, 3, 3],
            'predict': [True, True, False, True],
            'predicted_veracity': [3, 3, 3, 3],
            'embeddings': [None, None, None, None],
            'cluster': [1, 1, 1, 1],
            'num_correct_in_cluster': [1, 1, 1, 1],
            'total_in_cluster': [1, 1, 1, 1],
            'cluster_accuracy': [1.0, 1.0, 1.0, 1.0]
        }
        cluster_df = pd.DataFrame(data)
        precision, recall = cluster_predictor.calculate_precision_recall_for_three(cluster_df)
        assert precision == 1.0
        assert recall == 1.0

    #  Correctly calculates precision and recall when no predicted veracities match actual veracities
    def test_no_predictions_match_actuals(self):
        cluster_predictor = ClusterAndPredict()
        data = {
            'text': ['claim1', 'claim2', 'claim3', 'claim4'],
            'veracity': [3, 3, 3, 3],
            'predict': [True, True, False, True],
            'predicted_veracity': [1, 2, 2, 4],
            'embeddings': [None, None, None, None],
            'cluster': [1, 1, 1, 1],
            'num_correct_in_cluster': [0, 0, 0, 0],
            'total_in_cluster': [1, 1, 1, 1],
            'cluster_accuracy': [0.0, 0.0, 0.0, 0.0]
        }
        cluster_df = pd.DataFrame(data)
        precision, recall = cluster_predictor.calculate_precision_recall_for_three(cluster_df)
        assert precision == 0.0
        assert recall == 0.0

    #  Handles an empty dataframe without errors
    def test_empty_dataframe(self):
        cluster_predictor = ClusterAndPredict()
        cluster_df = pd.DataFrame(columns=['text', 'veracity', 'predict', 'predicted_veracity', 'embeddings', 'cluster', 'num_correct_in_cluster', 'total_in_cluster', 'cluster_accuracy'])
        precision, recall = cluster_predictor.calculate_precision_recall_for_three(cluster_df)
        assert precision == 0.0
        assert recall == 0.0

    #  Handles a dataframe where no predicted veracities are 3
    def test_no_predicted_veracities_are_3(self):
        cluster_predictor = ClusterAndPredict()
        data = {
            'text': ['claim1', 'claim2', 'claim3', 'claim4'],
            'veracity': [3, 3, 3, 3],
            'predict': [True, True, False, True],
            'predicted_veracity': [1, 2, 2, 4],
            'embeddings': [None, None, None, None],
            'cluster': [1, 1, 1, 1],
            'num_correct_in_cluster': [0, 0, 0, 0],
            'total_in_cluster': [1, 1, 1, 1],
            'cluster_accuracy': [0.0, 0.0, 0.0, 0.0]
        }
        cluster_df = pd.DataFrame(data)
        precision, recall = cluster_predictor.calculate_precision_recall_for_three(cluster_df)
        assert precision == 0.0
        assert recall == 0.0

    #  Handles a dataframe where no actual veracities are 3
    def test_no_actual_veracities_are_3(self):
        cluster_predictor = ClusterAndPredict()
        data = {
            'text': ['claim1', 'claim2', 'claim3', 'claim4'],
            'veracity': [1, 2, 4, 5],
            'predict': [True, True, False, True],
            'predicted_veracity': [3, 3, 3, 3],
            'embeddings': [None, None, None, None],
            'cluster': [1, 1, 1, 1],
            'num_correct_in_cluster': [0, 0, 0, 0],
            'total_in_cluster': [1, 1, 1, 1],
            'cluster_accuracy': [0.0, 0.0, 0.0, 0.0]
        }
        cluster_df = pd.DataFrame(data)
        precision, recall = cluster_predictor.calculate_precision_recall_for_three(cluster_df)
        assert precision == 0.0
        assert recall == 0.0


class TestCalculateAccuracy:

    #  Returns correct accuracy when all predictions are correct
    def test_all_predictions_correct(self):
        cluster_predictor = ClusterAndPredict()
        data = {
            'text': ['claim1', 'claim2', 'claim3'],
            'veracity': [1, 2, 3],
            'predict': [True, True, True],
            'predicted_veracity': [1, 2, 3],
            'embeddings': [None, None, None],
            'cluster': [0, 1, 2]
        }
        df = pd.DataFrame(data)
        accuracy = cluster_predictor.calculate_accuracy(df)
        assert accuracy == 1.0

    #  Returns correct accuracy when no predictions are correct
    def test_no_predictions_correct(self):
        cluster_predictor = ClusterAndPredict()
        data = {
            'text': ['claim1', 'claim2', 'claim3'],
            'veracity': [1, 2, 3],
            'predict': [True, True, True],
            'predicted_veracity': [3, 1, 2],
            'embeddings': [None, None, None],
            'cluster': [0, 1, 2]
        }
        df = pd.DataFrame(data)
        accuracy = cluster_predictor.calculate_accuracy(df)
        assert accuracy == 0.0

    #  Handles empty DataFrame without errors
    def test_empty_dataframe(self):
        cluster_predictor = ClusterAndPredict()
        df = pd.DataFrame(columns=['text', 'veracity', 'predict', 'predicted_veracity', 'embeddings', 'cluster'])
        accuracy = cluster_predictor.calculate_accuracy(df)
        assert accuracy == 0.0

    #  Handles DataFrame with all 'predict' values as False
    def test_all_predict_false(self):
        cluster_predictor = ClusterAndPredict()
        data = {
            'text': ['claim1', 'claim2', 'claim3'],
            'veracity': [1, 2, 3],
            'predict': [False, False, False],
            'predicted_veracity': [1, 2, 3],
            'embeddings': [None, None, None],
            'cluster': [0, 1, 2]
        }
        df = pd.DataFrame(data)
        accuracy = cluster_predictor.calculate_accuracy(df)
        assert accuracy == 0.0

    #  Handles DataFrame with missing 'veracity' or 'predicted_veracity' columns
    def test_missing_columns(self):
        cluster_predictor = ClusterAndPredict()

        # Missing 'veracity' column
        data_missing_veracity = {
            'text': ['claim1', 'claim2', 'claim3'],
            'predict': [True, True, True],
            'predicted_veracity': [1, 2, 3],
            'embeddings': [None, None, None],
            'cluster': [0, 1, 2]
        }
        df_missing_veracity = pd.DataFrame(data_missing_veracity)

        with pytest.raises(KeyError):
            cluster_predictor.calculate_accuracy(df_missing_veracity)

        # Missing 'predicted_veracity' column
        data_missing_predicted_veracity = {
            'text': ['claim1', 'claim2', 'claim3'],
            'veracity': [1, 2, 3],
            'predict': [True, True, True],
            'embeddings': [None, None, None],
            'cluster': [0, 1, 2]
        }
        df_missing_predicted_veracity = pd.DataFrame(data_missing_predicted_veracity)

        with pytest.raises(KeyError):
            cluster_predictor.calculate_accuracy(df_missing_predicted_veracity)
